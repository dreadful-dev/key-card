#!/bin/bash
touch() {
  # Credit to https://github.com/a-dma/yubitouch/blob/master/yubitouch.sh
  # BSD 2-Clause License

  # Copyright (c) 2016, Alessio Di Mauro
  # All rights reserved.

  # Redistribution and use in source and binary forms, with or without
  # modification, are permitted provided that the following conditions are met:

  # * Redistributions of source code must retain the above copyright notice, this
  #   list of conditions and the following disclaimer.

  # * Redistributions in binary form must reproduce the above copyright notice,
  #   this list of conditions and the following disclaimer in the documentation
  #   and/or other materials provided with the distribution.

  # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
  GCA=$(command -v gpg-connect-agent)
  XXD=$(command -v xxd)
  OD=$(command -v od)
  DO=0
  UIF=0

  ascii_to_hex()
  {
      if [ -n "$XXD"  ]
      then
          $XXD -ps
      elif [ -n "$OD" ]
      then
          $OD -An -tx1
      fi
  }

  PE=$(command -v pinentry-mac)
  PE_PROMPT='SETPROMPT Admin PIN\nGETPIN\nBYE\n'

  if [ -z "$GCA" ]
  then
      echo "Can not find gpg-connect-agent. Aborting..." >&2
      exit 1;
  fi

  if [ -z "$XXD" ] && [ -z "$OD" ]
  then
      echo "Can not find xxd(1) nor od(1). Aborting..." >&2
      exit 1;
  fi

  if [ $# -lt 2 ] || [ $# -gt 3 ]
  then
      echo "Wrong parameters" >&2
      echo "usage: yubitouch {all|sig|aut|dec|att} {get|off|on|fix|cacheon|cachefix} [admin_pin]" >&2
      exit 1;
  fi


  if [ "$1" = "all" ]
  then
      Keys="sig dec aut att"
  else
      Keys=$1
  fi

  for k in $(echo $Keys); do
      if [ "$k" = "sig" ]
      then
          DO="D6"
      elif [ "$k" = "dec" ]
      then
          DO="D7"
      elif [ "$k" = "aut" ]
      then
          DO="D8"
      elif [ "$k" = "att" ]
      then
          DO="D9"
      else
          echo "Invalid key value '$k' (must be sig, aut, dec, att). Aborting..." >&2
          exit 1
      fi

      if [ "$2" = "get" ]
      then
          "$GCA" --hex "scd reset" /bye > /dev/null

          GET=$("$GCA" --hex "scd apdu 00 ca 00 $DO 00" /bye)
          if ! echo "$GET" | grep -q "90 00"
          then
              echo "Get data failed for $k, unsupported device?" >&2
              exit 1
          fi

          STATUS=$(echo "$GET" | grep -oE "[0-9]{2} 20 90 00" | cut -c 1-2)

          if [ "$STATUS" = "00" ]
          then
              UIF="off"
          elif [ "$STATUS" = "01" ]
          then
              UIF="on"
          elif [ "$STATUS" = "02" ]
          then
              UIF="fix"
          elif [ "$STATUS" = "03" ]
          then
              UIF="cacheon"
          elif [ "$STATUS" = "04" ]
          then
              UIF="cachefix"
          else
              echo "Unknown touch setting status ($STATUS)" >&2
              exit 1
          fi

          echo "Current $k touch setting: $UIF" >&2
          continue
      elif [ "$2" = "off" ]
      then
          UIF="00";
      elif [ "$2" = "on" ]
      then
          UIF="01"
      elif [ "$2" = "fix" ]
      then
          UIF="02";
      elif [ "$2" = "cacheon" ]
      then
          UIF="03";
      elif [ "$2" = "cachefix" ]
      then
          UIF="04";
      else
          echo "Invalid value $2 (must be get, off, on, fix, cacheon, cachefix). Aborting..." >&2
          exit 1
      fi

      echo "Processing key $k with action $2"

      if [ $# -eq 3 ] && [ -z "$PIN" ]
      then
          PIN="$3"
      elif [ -z "$PE" ] && [ -z "$PIN" ]
      then
          echo "Pinentry not present" >&2
          echo "Falling back to regular stdin." >&2
          echo "Be careful!" >&2
          echo "Enter your admin PIN: "
          read -r PIN
      elif [ -z "$PIN" ]
      then
          CURRENT_TTY=$(tty)
          # shellcheck disable=SC2059
          PIN=$(printf "$PE_PROMPT" | $PE --ttyname "$CURRENT_TTY" | sed -n '/^D .*/s/^D //p')
      fi

      if [ -z "$PIN" ]
      then
          echo "Empty PIN. Aborting..." >&2
          exit 1
      fi

      PIN_LEN=${#PIN}

      # shellcheck disable=SC2059
      PIN_HEX=$(printf "$PIN" | ascii_to_hex | tr -d '\n')

      PIN_LEN_HEX=$(printf %02x "$PIN_LEN")

      "$GCA" --hex "scd reset" /bye > /dev/null

      VERIFY=$("$GCA" --hex "scd apdu 00 20 00 83 $PIN_LEN_HEX $PIN_HEX" /bye)
      if ! echo "$VERIFY" | grep -q "90 00"
      then
          echo "Verification failed, wrong pin?" >&2
          exit 1
      fi

      PUT=$("$GCA" --hex "scd apdu 00 da 00 $DO 02 $UIF 20" /bye)
      if ! echo "$PUT" | grep -q "90 00"
      then
          echo "Unable to change mode for key $k. Set to fix?" >&2
          exit 1
      fi
  done

  echo "All done!"

}