###########################################################
#  01000100 01010010 01000101 01000001 01000100 01000110  #
#  01010101 01001100  01000100 01000101 01010110          #
###########################################################
#                                                         #
#  KEY BACKUP                                             #
#                                                         #
#  This script creates a loopback filesystem using an     #
#  image named gpg.img. It creates a 25MB image file,     #
#  sets up a loopback device for the image, encrypts the  #
#  loopback device using LUKS, creates an ext2 filesystem #
#  on the encrypted device, mounts the filesystem, copies #
#  the GnuPG directory to the mounted filesystem, and     #
#  then unmounts the filesystem and detaches the loopback #
#  device. The path to your GnuPG directory should be set #
#  in the GNUPGHOME environment variable. Run this script #
#  with root privileges.                                  #
#                                                         #
###########################################################

backup_private_keys() {

  # Set the image file name
  local IMG="gpg.img"

  # Set the mount point
  local MNT=".tmp/encrypted-storage"

  # Set the size of the image (25M in this case)
  local SIZE="25M"

  # Create an empty image file
  dd if=/dev/zero of=$IMG bs=$SIZE count=1

  # Create a loopback device
  local LOOPBACK=$(hdiutil attach -nomount ram://$((2048*SIZE)))

  # Encrypt the loopback device
  diskutil coreStorage convert $LOOPBACK -passphrase

  # Create an ext2 filesystem
  diskutil eraseVolume JHFS+ 'gpg-$(date +%F)' $LOOPBACK

  # Create the mount point
  mkdir -p $MNT

  # Mount the filesystem
  mount -t hfs $LOOPBACK $MNT

  # Copy the GnuPG directory to the mounted filesystem
  cp -avi $GNUPGHOME $MNT

  # Unmount the filesystem
  umount $MNT

  # Detach the loopback device
  hdiutil detach $LOOPBACK
}
