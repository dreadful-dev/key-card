#############################################################
#   01000100 01010010 01000101 01000001 01000100 01000110   #
#   01010101 01001100 00101101 01000100 01000101 01010110   #
#############################################################
#                                                           #
#  GPG KEY SETUP                                            #
#                                                           #
#  This function sets up a GPG key. It creates a temporary  #
#  working directory and hardens the configuration. It      #
#  generates a strong passphrase and a new GPG key. It      #
#  allows for the addition of extra identities. It verifies #
#  the keys and exports the secret keys. It also creates a  #
#  revocation certificate.                                  #
#                                                           #
#############################################################

gpg_key_setup() {
  # Check for dependencies
  command -v gpg >/dev/null 2>&1 || { echo "❌ gpg is required but not installed. Exiting."; return; }
  command -v wget >/dev/null 2>&1 || { echo "❌ wget is required but not installed. Exiting."; return; }

  # Temporary working directory
  export GNUPGHOME=$(mktemp -d -t gnupg_$(date +%Y%m%d%H%M)_XXX) || { echo "Failed to create temporary directory. Exiting."; return; }

  # Harden configuration
  wget -O $GNUPGHOME/gpg.conf https://raw.githubusercontent.com/drduh/config/master/gpg.conf || { echo "Failed to fetch gpg configuration. Exiting."; return; }

  # Generate a strong passphrase
  passphrase=$(gpg --gen-random --armor 0 24) || { echo "Failed to generate passphrase. Exiting."; return; }
  echo "Generated passphrase: $passphrase"

  KEY_TYPE="RSA"
  KEY_LENGTH="4096"
  EXPIRE_DATE="0"

  read -p "Enter your name: " NAME
  read -p "Enter your email: " EMAIL

  # Create batch file
  cat >keygen <<EOF
%echo Generating master OpenPGP key
Key-Type: $KEY_TYPE
Key-Length: $KEY_LENGTH
Key-Usage: cert
Subkey-Type: $KEY_TYPE
Subkey-Length: $KEY_LENGTH
Subkey-Usage: sign
Name-Real: $NAME
Name-Email: $EMAIL
Expire-Date: $EXPIRE_DATE
%commit
%echo done
EOF

  # Generate a new key with GPG
  gpg --batch --gen-key keygen || { echo "Key generation failed. Exiting."; return; }

  rm -f keygen
  export FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr' | head -1 | awk -F: '{print $10}')
  echo "Extracted FINGERPRINT: $FINGERPRINT"
  export KEYID=$(gpg --list-secret-keys --with-colons | grep '^sec:' | tail -1 | awk -F: '{print $5}')
  echo "Extracted KEYID: $KEYID"
  read -r -p "If the above KEYID is not the one you expect, please enter your KEYID (or press enter to continue with the extracted KEYID): " user_input
  if [ ! -z "$user_input" ]; then
    KEYID=$user_input
  fi

  echo "adding encryption subkey"
  gpg --batch --quick-add-key $FINGERPRINT rsa4096 encr 1y
  echo "adding authentication subkey"
  gpg --batch --quick-add-key $FINGERPRINT rsa4096 auth 1y
  echo "adding sign subkey"
  gpg --batch --quick-add-key $FINGERPRINT rsa4096 sign 1y

  # Add extra identities
  read -r -p "Enter additional email address (or leave blank to skip): " email
  if [ ! -z "$email" ]; then
    printf "adduid\n$email\n" | gpg --expert --edit-key "$KEYID"
  fi

  # Verify
  gpg -K || { echo "Key verification failed. Exiting."; return; }

  echo "Please verify the key information above."
  read -p "Does the key look correct? (y/n) " answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    echo "Continuing with the process."
  else
    echo "Exiting."
    return
  fi
  

  # Assuming `hokey lint` is available or add a check
  gpg --export "$KEYID" | hokey lint || { echo "hokey lint failed. Exiting."; return; }

  # Export secret keys
  gpg --armor --export-secret-keys "$KEYID" > "$GNUPGHOME/mastersub.key" || { echo "Failed to export secret keys. Exiting."; return; }
  gpg --armor --export-secret-subkeys "$KEYID" > "$GNUPGHOME/sub.key" || { echo "Failed to export secret subkeys. Exiting."; return; }

  # Create revocation certificate
  gpg --output "$GNUPGHOME/revoke.asc" --gen-revoke "$KEYID" || { echo "Failed to create revocation certificate. Exiting."; return; }
  echo "🔐 Done creating keys"
}
